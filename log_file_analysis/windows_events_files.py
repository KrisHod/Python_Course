# When using a Windows computer different system activites are stored as events. 
# These events can be viewed easily using the Windows Event Viewer. The information captured as part of these events are stored in EVTX files.
# An EVTX file, short for "Event Log XML File," is a proprietary Windows event log file format used to store event logs generated by the Windows operating system and various applications. 
# These files contain a structured record of system and application events, including security events, errors, warnings, and informational messages. 
# EVTX files are stored in a binary format and are typically found in the "C:\Windows\System32\winevt\Logs" directory on Windows systems.
# This demo uses a special module to help interpret these files.

import Evtx.Evtx as evtx
import re

#notice how we use an evtx specific function to open the file
def openEvtxFile(path):
    with evtx.Evtx(path) as log_file:
        for log_entry in log_file.records():
            yield log_entry.lxml()

print(next(openEvtxFile(r"C:\Users\Kris\Desktop\PythonCourse\log_file_analysis\logs\Security.evtx")))

#we populate a dictionary with the event information
def parseEvtx(event):
    sys_tag = event.find("System", event.nsmap)
    event_id = sys_tag.find("EventID", event.nsmap)
    event_ts = sys_tag.find("TimeCreated", event.nsmap)
    event_data = event.find("EventData", event.nsmap)
    r = {}
    r["ts"] = event_ts.values()[0]
    r["eid"] = event_id.text
    for data in event_data.getchildren():
        r[data.attrib["Name"]] = data.text

    return r

print(parseEvtx(next(openEvtxFile(r"C:\Users\Kris\Desktop\PythonCourse\log_file_analysis\logs\Security.evtx"))))

# The PluralSight demo investigates a specific utility used to run DLLs. 
# This utility can be used to run malicious code (https://attack.mitre.org/techniques/T1218/011/).
# DLLs, or Dynamic Link Libraries, are files containing reusable code and data that multiple programs can use simultaneously. 
# They are a fundamental component of the Microsoft Windows operating system and play a crucial role in software development. DLLs contain functions, procedures, and resources that applications can call upon during runtime, allowing for code modularity, reduced memory usage, and efficient software maintenance. This shared library concept helps in conserving system resources and simplifying updates or bug fixes since changes in a DLL can benefit all applications that depend on it. 
# DLLs are widely used for tasks like device drivers, graphics rendering, and extending the functionality of applications.
# Here we are analyzing the event file to try and find if new processes are creaded using the specific utility. We use a specific event ID to locate created processes
def detectRundll32(path):
    log_file = openEvtxFile(path)
    for log_entry in log_file:
        try:
            log_data = parseEvtx(log_entry)
            if log_data["eid"] == "4688" and log_data["CommandLine"]:
                if "rundll32" in log_data["NewProcessName"] and re.search("powershell|cmd", log_data["ParentProcessName"]):
                    print(log_data["CommandLine"])
        except:
            pass

detectRundll32(r"C:\Users\Kris\Desktop\PythonCourse\log_file_analysis\logs\Security.evtx")